/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.58
 * Generated at: 2022-02-21 05:28:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class board_005flogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link\r\n");
      out.write("	href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\" id=\"bootstrap-css\">\r\n");
      out.write("<script\r\n");
      out.write("	src=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"asset/css/main.css\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://fonts.googleapis.com/css2?family=Do+Hyeon&display=swap\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	background-image: url('asset/img/bg.jpg');\r\n");
      out.write("	font-family: 'Do Hyeon', sans-serif;\r\n");
      out.write("	font-size: 30px;\r\n");
      out.write("}\r\n");
      out.write("#check{\r\n");
      out.write("	font-size : 20px;\r\n");
      out.write("	color : red;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"wrapper fadeInDown\">\r\n");
      out.write("		<div id=\"formContent\">\r\n");
      out.write("\r\n");
      out.write("			<!-- Login Form -->\r\n");
      out.write("			<form action=\"#\">\r\n");
      out.write("				<input type=\"text\" id=\"id\" class=\"fadeIn second\" name=\"id\"placeholder=\"login\" style=\"margin-top: 30px\"> \r\n");
      out.write("				<input type=\"password\" id=\"password\" class=\"fadeIn third\" name=\"pw\" placeholder=\"password\"> \r\n");
      out.write("				<p id=\"check\"></p> \r\n");
      out.write("				<input type=\"button\" id=\"submit\" class=\"fadeIn fourth\" value=\"Log In\">\r\n");
      out.write("			</form>\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		let btn_submit = document.getElementById(\"submit\");\r\n");
      out.write("		let check_p = document.getElementById(\"check\");\r\n");
      out.write("		\r\n");
      out.write("		btn_submit.addEventListener(\"click\", function(){\r\n");
      out.write("			//1. id칸이나 pw칸 둘중에 하나라도 비어있으면\r\n");
      out.write("			//p(id=check) \"아이디/비밀번호를 입력해주세요\" 문구 출력\r\n");
      out.write("			let id = document.getElementById(\"id\").value;\r\n");
      out.write("			let pw = document.getElementById(\"password\").value;\r\n");
      out.write("			\r\n");
      out.write("			// if(!id||!pw){\r\n");
      out.write("			if(id == \"\" || pw == \"\"){\r\n");
      out.write("				check_p.innerText=\"아이디/비밀번호를 입력해주세요\";\r\n");
      out.write("			}else{\r\n");
      out.write("				//JSON({키 : 실제값}) 형식 데이터 만들기\r\n");
      out.write("				let data = {'id': id, 'pw':pw};\r\n");
      out.write("				\r\n");
      out.write("				let xhr = new XMLHttpRequest(); \r\n");
      out.write("				\r\n");
      out.write("				//요청방식, 요청경로 (post방식으로 loginSerivice에 요청)\r\n");
      out.write("				xhr.open(\"post\", \"loginService\");\r\n");
      out.write("				\r\n");
      out.write("				//전송데이터의 형식\r\n");
      out.write("				xhr.setRequestHeader(\"Content-Type\",\"application/json;charset=UTF-8\");\r\n");
      out.write("				\r\n");
      out.write("				//요청 & 전송할 데이터\r\n");
      out.write("				xhr.send(JSON.stringify(data));\r\n");
      out.write("				\r\n");
      out.write("				xhr.onreadystatechange = function() {\r\n");
      out.write("					if(xhr.readyState === XMLHttpRequest.DONE){ //요청성공\r\n");
      out.write("						if(xhr.status===200){\r\n");
      out.write("							console.log(\"응답성공\");\r\n");
      out.write("							console.log(xhr.responseText); //응답데이터 확인 //xml로 보내는경우=>(responseXML)\r\n");
      out.write("							\r\n");
      out.write("							if(xhr.responseText === \"success\"){\r\n");
      out.write("								location.href = \"board_list.jsp\";\r\n");
      out.write("							}else{\r\n");
      out.write("								check_p.innerText=\"아이디/비밀번호를 확인해주세요\";\r\n");
      out.write("							}\r\n");
      out.write("							\r\n");
      out.write("						}else{\r\n");
      out.write("							console.log(\"응답실패\");\r\n");
      out.write("						}\r\n");
      out.write("					}else{ // 요청실패\r\n");
      out.write("						console.log(\"요청실패\");\r\n");
      out.write("					}\r\n");
      out.write("				}// end of function\r\n");
      out.write("			} // end of else\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
